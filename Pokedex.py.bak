import curses
import json

# Define a list of menu items
# the last menu item should always be back or quit

DICT_MAIN = {}
DICT_POKEDEX = {}
DICT_BATTLE_SCANNER = {}

DICT_POKEDEX = {"Name": "Pokedex","Back": DICT_MAIN}
DICT_BATTLE_SCANNER = {"Name": "Scanner", "Types": DICT_POKEDEX, "Moves": DICT_POKEDEX, "Back": DICT_MAIN}
DICT_MAIN = {"Pokédex": DICT_POKEDEX, "Name": "Main", "Battle Scanner": DICT_BATTLE_SCANNER, "QUIT": None}

WINDOW_X = 32
WINDOW_Y = 64

POKEDEX_FILE_NAME = "Pokemon.json"

# Define a function to print the menu items to the screen
def print_menu(stdscr, current_row, menu, data):
    #pick menu options based on what menu we're in
    menu_options = get_menu_options(menu, data)
    
    curses.resize_term(WINDOW_X, WINDOW_Y)
    stdscr.clear()
    print_icon(stdscr)
    for i, item in enumerate(menu_options):
        x = 4
        y = 2 + i

        if i == current_row:
            stdscr.attron(curses.color_pair(1))
            stdscr.addstr(y, x, "> " + item)
            stdscr.attroff(curses.color_pair(1))
        else:
            stdscr.addstr(y, x, item)
    stdscr.refresh()

def get_menu_options(menu, data):
    if(menu["Name"] == "Pokedex"):
        return list(data.keys())
    else:
        options = list(menu.keys())
        return options

def print_icon(stdscr):
    stdscr.addstr(0, 56, "   _   ")
    stdscr.addstr(1, 56, ",-<_>-.")
    stdscr.addstr(2, 56, ">-<_>-<")
    stdscr.addstr(3, 56, ">-<_>-<")
    stdscr.addstr(4, 56, "`-<_>-'")


def handle_menu_selection(stdscr, current_row, menu_dict):
    # handle input based on current row and current menu
    menu_list = list(menu_dict.keys())
    selection_key = menu_list[current_row]
    selection = menu_dict[selection_key]
    return selection




# Define a function to handle user input and navigation
def handle_input(stdscr, data):
    # Turn on color support
    curses.start_color()    
    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
    
    # Hide the cursor
    curses.curs_set(0)
    
    # Set up initial variables
    current_row = 0
    current_menu_dict = DICT_MAIN
    menu_options_count = len(current_menu_dict)
    
    # Loop to handle user input
    while True:
        
        if current_menu_dict is None:
            break

        print_menu(stdscr, current_row, current_menu_dict, data)
        key = stdscr.getch()
        
        if key == curses.KEY_UP and current_row > 0:
            current_row -= 1
        elif key == curses.KEY_DOWN and current_row < menu_options_count - 1:
            current_row += 1
        elif key == curses.KEY_ENTER or key in [10, 13]:
            #need more robust way to handle menu items and how many there are
            #refactor handle_menu_selection and get_menu_options and print_menu
            #potentially make a menu data container
            current_menu_dict = handle_menu_selection(stdscr, current_row, current_menu_dict)

def read_pokedex_data():
    with open(POKEDEX_FILE_NAME) as file:
        pokemonData = json.load(file)
    return pokemonData

# Set up curses and run the main function
def main(stdscr):
    #read in existing pokemon data and store it in pokedex dict
    data = read_pokedex_data()
    handle_input(stdscr, data)

curses.wrapper(main)


"""
_.-;;-._ '-..-'| || | '-..-'|_.-;-._| '-..-'| || | '-..-'|_.-''-._|
"""





"""
box[0] = '\xDA';//  ┌
box[1] = '\xBF';//  ┐
box[2] = '\xC0';//  └
box[3] = '\xD9';//  ┘
box[4] = '\xB3';//  │ 
box[5] = '\xC4';//  ─

box[6] = '\xC9';//  ╔ 
box[7] = '\xBB';//  ╗
box[8] = '\xC8';//  ╚
box[9] = '\xBC';//  ╝
box[10] = '\xBA';// ║
box[11] = '\xCD';// ═

shdw[1] = '\xB0';// ░

shdw[2] = '\xB1';// ▒

shdw[3] = '\xB2';// ▓

shdw[4] = '\xDB';// █
"""